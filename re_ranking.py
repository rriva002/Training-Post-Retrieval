# =============================================================================
# [The Re-raking implementation]
#
# Input:
# CK - Current keywords set (In 1st iteration, it is simply the user-specified
#      seed-word set)
#
# SK - Shortlisted Candidate Keywords (the list is generated by the
#      inital-ranking, which is a list of the top words ranked by entory
#      values)
#
# Output:
# NR - The re-ranked list of SK (re-ranked candidate words from SK)
# =============================================================================

import operator
import sys
import os
import json

'''
[Input]

Here we specify seed words.
For example, the followings are the seed-words specified by a healthcare domain
expert for product E-Cig (E-Cigarette)
'''

seed_words = "e-cigarette e-cigarettes e-cig e-cigs cigarette cigarettes cig cigs".split() # specify your own seed word here

print("[Input]")
print(" (CK) - current keyword set: " + str(seed_words))

filename = "data/candidate_words_and_extracted_tweets.json"
candidate_words_and_extracted_tweets = json.load(open(filename))
candidate_words = candidate_words_and_extracted_tweets.keys()

print(len(candidate_words))
print(" (SK) - Shortlisted Candidate Keywords " + str([str(w) for w in candidate_words]))
print(" (note: the above words in SK are top 100 words extracted from "
      + "inital-ranking, but here they are presented just alphabetically "
      + "(in a key-style manner) and are not ordered by initial-ranked "
      + "scores, as they will be re-ranked soon.)")

# RankScore records for all candidate words
candidicates_relevance_value = {}
candidicates_relevance_detail_num = {}
candidicates_keyword_hit_num = {}
candidicates_sentence_example = {}

'''
[Processing]

Re-Rank the candidate words by relevance scores

'''
print("\nprocessing...")

for one_candicate in candidate_words:
    # RankScore records for one candidate word
    one_candidate_word_matched_result = {}
    one_candidate_words_matched_tweets = {}
    one_candidate_word_returned_result = {}
    one_candidate_word_relevance_result = - 1.0

    candidate_word_lowered = one_candicate.lower()
    one_candidate_word_matched_result[candidate_word_lowered] = 0
    one_candidate_word_returned_result[candidate_word_lowered] = 0
    one_candidate_words_matched_tweets[candidate_word_lowered] = []

    valid_num_line = 0
    matched_valid_num_line = 0
    matched_sentence = []

    lines = candidate_words_and_extracted_tweets[candidate_word_lowered]
    for line in lines:
        clean_line = line.strip()
        tokens_one_tweet = clean_line.split(' ')
        tokens_one_tweet_lower = []
        for one_token_raw in tokens_one_tweet:
            tokens_one_tweet_lower.append(one_token_raw.lower())

        if clean_line != '':
            valid_num_line += 1

            one_candidate_word_returned_result[candidate_word_lowered] += 1
            matched = False

            for seed in seed_words:
                if seed.lower() in tokens_one_tweet_lower:  # co-occurrence
                    matched = True
                    keyword_mathced = seed.lower()
            if(matched):
                matched_sentence.append(clean_line)
                matched_valid_num_line += 1
                one_candidate_word_matched_result[candidate_word_lowered] += 1
                one_candidate_words_matched_tweets[candidate_word_lowered].append(clean_line)

    for key in one_candidate_word_matched_result:
        if(one_candidate_word_returned_result[key] != 0):
            one_candidate_word_relevance_result = float(one_candidate_word_matched_result[key]) / float(valid_num_line)


    sample_sentence = "..."
    if(one_candidate_word_matched_result[candidate_word_lowered] != 0):
        sample_sentence = matched_sentence[0]

    candidicates_relevance_value[candidate_word_lowered] = one_candidate_word_relevance_result
    candidicates_relevance_detail_num[candidate_word_lowered] = str(one_candidate_word_matched_result[candidate_word_lowered]) + "/" + str(valid_num_line)
    candidicates_sentence_example[candidate_word_lowered] = sample_sentence

sorted_candidates = sorted(candidicates_relevance_value.items(), key=operator.itemgetter(1))
sorted_candidates.reverse()

print("\nDone!")

'''
[Output]

Show Results

'''

print("\n[Output]")
print(" (NR) - Re-Ranked Candidate keywords: [", end="")

for tp in sorted_candidates:
    key = tp[0]
    '''print words and scores (re-ranked)'''
    print(key + ": " + str(candidicates_relevance_value[key]) + ", ", end="")

print("]")